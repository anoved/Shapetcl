[manpage_begin SHAPETCL 3 0.1]
[moddesc "Simple shapefile access."]
[copyright {2012 Jim DeVona}]
[require shapetcl]
[description]
[package Shapetcl] is a Tcl extension that provides read/write access to shapefiles, a vector GIS file format developed by Esri.

[section Terminology]
Conceptually, a shapefile is comprised of [term features] and [term records]. Features consist of coordinate geometry (points or polygons, for example). Records consist of attribute values (labels, ID numbers, or other data associated with each feature). There is a one-to-one relationship between features and records. Together, a feature-record pair is referred to as an [term entity].
[para]
Features are composed of [term parts] which are composed of [term vertices]. A vertex is a set of coordinates. Features with no coordinates are legal (albeit of limited use) and are referred to as [term {null features}]. See [sectref {Coordinate Lists}] for more detail.
[para]
Records are composed of [term values] corresponding to one or more [term fields]. Fields are defined to contain data of particular types. No-data values are legal and are referred to as [term {null values}]. See [sectref {Field Definition Lists}] for more detail.

[section API]

[subsection {Package Commands}]

The [package shapetcl] package exports a single command:

[list_begin definitions]
[call [cmd ::shapetcl::shapefile] [arg path] [opt [arg mode]]]
[call [cmd ::shapetcl::shapefile] [arg path] [arg type] [arg fields]]
Open or create a shapefile. Returns a [arg shapefile] token and an associated [sectref {Shapefile Command}].
[para]
In the first form, the existing shapefile at [arg path] is opened. If specified, [arg mode] may be one of [arg readwrite] or [arg readonly]. The default mode is [arg readonly].
[para]
In the second form, a new shapefile is created at [arg path] and opened in [arg readwrite] mode. [arg type] must be a valid [sectref {Feature Types} {Feature Type}] and [arg fields] must be a valid [sectref {Field Definition Lists} {Field Definition List}] that defines at least one attribute field.
[list_end]

[subsection {Shapefile Command}]

The [arg shapefile] token returned by [cmd ::shapetcl::shapefile] acts as a command of the following form:

[list_begin definitions]
[call [arg shapefile] [method method] [opt [arg {args...}]]]
See the [sectref {Shapefile Methods}] section for details on the supported methods. Note that any distinct abbreviation may be given for method names, such as [method coord] for [method coordinates].
[list_end]

[subsection {Shapefile Methods}]

[list_begin definitions]

[call [arg shapefile] [method configure] [arg option] [opt [arg value]]]
Returns the current value of the specified [arg option]. If a [arg value] is given, it is assigned to the specified [arg option] before the value is returned. Valid boolean values are [const 0] and [const 1]. See [sectref {Config Options}] for details.

[call [arg shapefile] [method file] [arg subcommand]]
The [method file] method returns information about the shapefile.
[list_begin definitions]
[call [arg shapefile] [method file] [method mode]]
Returns one of [const readwrite] or [const readonly], indicating the access mode.
[call [arg shapefile] [method file] [method path]]
Returns the path provided as the first argument to the [cmd ::shapetcl::shapefile] command.
[list_end]

[call [arg shapefile] [method info] [arg subcommand]]
The [method info] method returns information about the contents of the shapefile.
[list_begin definitions]
[call [arg shapefile] [method info] [method count]]
Returns the number of entities in the shapefile. [const 0] indicates an empty shapefile.
[call [arg shapefile] [method info] [method type] [opt [arg subcommand]]]
If no [arg subcommand] is given, returns the [sectref {Feature Types} {Feature Type}].
[comment {info type options}]
[list_begin definitions]
[call [arg shapefile] [method info] [method type] [method numeric]]
Returns a numeric code corresponding to the feature type. Based on shape type codes use in shapefile header.
[call [arg shapefile] [method info] [method type] [method base]]
Returns a string indicating the base feature type of [arg shapefile], disregarding the presence of M or Z coordinate dimensions. One of [const point], [const arc], [const polygon], or [const multipoint].
[call [arg shapefile] [method info] [method type] [method dimension]]
Returns a string indicating the coordinate dimension of [arg shapefile], disregarding the base feature type. One of [const xy], [const xym], or [const xyzm]. Note that all feature types with Z coordinates also have M coordinates.
[list_end]
[call [arg shapefile] [method info] [method bounds] [opt [arg index]]]
Returns a list indicating the minimum and maximum coordinate values of the features in [arg shapefile], or, if the [arg index] argument is present, of the single feature specified by [arg index]. The number of coordinates returned depends on the coordinate dimension of [arg shapefile], unless the [arg getAllCoordinates] or [arg getOnlyXyCoordinates] [sectref {Config Options}] are set.
[para]
The default bounds list format for [const xy], [const xym], and [const xyzm] feature types, respectively, are as follows:
[list_begin definitions]
[def [const {xmin ymin xmax ymax}]]
[def [const {xmin ymin mmin xmax ymax mmax}]]
[def [const {xmin ymin zmin mmin xmax ymax zmax mmax}]]
[list_end]
[list_end]

[call [arg shapefile] [method fields] [arg subcommand]]
The [method fields] method returns information about [arg shapefile]'s attribute table fields. It is also used to add new fields to the attribute table.
[list_begin definitions]
[call [arg shapefile] [method fields] [method count]]
Returns the number of fields in the attribute table. Attributes tables must have a minimum of one field.
[call [arg shapefile] [method fields] [method index] [arg name]]
Returns index of the named field. Throws an error if the attribute table contains no field with the given [arg name]. If the attribute table contains multiple fields with the same name, returns the index of the first such field.
[call [arg shapefile] [method fields] [method list] [opt [arg index]]]
Returns a [sectref {Field Definition Lists} {Field Definition List}] describing all the fields in [arg shapefile], or, if [arg index] is given, the single field specified by [arg index].
[para]
Given a [arg shapefile] variable [var shp], get the properties of the first field with:
[example {lassign [$shp fields list 0] type name width precision}]
Or, to process each field in turn:
[example {foreach {type name width precision} [$shp fields list] {
    # do something with properties of this field...
}}]
[call [arg shapefile] [method fields] [method add] [arg fields]]
Add fields to [arg shapefile]'s attribute table. The [arg fields] argument must contain a [sectref {Field Definition Lists} {Field Definition List}] describing one or more fields. New fields of existing records are initialized to null values. Returns the index of the last field added.
[para]
Add a single string field named [const Title] with:
[example {$shp fields add {string Title 100 0}}]
Add a pair of floating-point numeric fields with:
[example {$shp fields add {double Lat 19 9 double Lon 19 9}}]
[list_end]

[call [arg shapefile] [method coordinates] [arg subcommand]]
The [method coordinates] method provides subcommands to read or write feature geometry.
[list_begin definitions]
[call [arg shapefile] [method coordinates] [method read] [opt [arg index]]]
If no [arg index] is given, returns a list of [sectref {Coordinate Lists}], one for each feature in [arg shapefile]. If [arg index] is given, returns a single [sectref {Coordinate Lists} {Coordinate List}] containing the coordinates of the feature specified by [arg index].
[example {foreach feature [$shp coordinates read] {
   # process feature geometry
}}]
[call [arg shapefile] [method coordinates] [method write] [opt [arg index]] [arg coordinates]]
If [arg index] is given, overwrites the specified feature geometry. If no [arg index] argument is given, appends a new feature and adds an associated attribute record populated with null values. (Use the [arg shapefile] [method write] method to append a new entity with coordinate data and attribute data at the same time.) The [arg coordinates] argument may be a [sectref {Coordinate Lists} {Coordinate List}] or an empty list [const {{}}], in which case a null feature is written. Returns the index of the written feature.
[para]
Overwrite the first feature of point shapefile [var shp] with new coordinates:
[example {$shp coordinates write 0 {{3.069799 36.786913}}}]
Add a new feature, and subsequently fill in its attributes:
[example {set index [$shp coordinates write {{151.523438 -79.812302}}]
# (assuming attribute table contains a single string field)
$shp attributes write $index {McMurdo Station}}]
[list_end]

[call [arg shapefile] [method attributes] [arg subcommand]]
The [method attributes] method provides subcommands to read or write attribute records.
[list_begin definitions]
[call [arg shapefile] [method attributes] [method read] [opt [arg index]]]
If no [arg index] is given, returns a list of all attribute records in [arg shapefile]. If [arg index] is given, returns the attribute record specified by [arg index]. An [sectref {Attribute Records} {Attribute Record}] is a list that contains one value for each field in the attribute table.
[example {foreach record [$shp attributes read] {
    # [llength $record] == [$shp fields count]
}}]
[call [arg shapefile] [method attributes] [method read] [arg index] [arg field]]
Returns a single attribute value from record [arg index]. [arg field] specifies the index of the field to read.
[para]
Get the value of a field named [const ID] from the first record:
[example {$shp attributes read 0 [$shp fields index "ID"]}]
[call [arg shapefile] [method attributes] [method write] [opt [arg index]] [arg values]]
If [arg index] is given, overwrites the specified attribute record. If no [arg index] argument is given, appends a new attribute record and adds an associated null feature. (Use the [arg shapefile] [method write] method to append a new entity with coordinate data and attribute data at the same time.) The [arg values] argument may be an [sectref {Attribute Records} {Attribute Record}] or an empty list [const {{}}], in which case the attribute record is populated with null values. Returns the index of the written record.
[call [arg shapefile] [method attributes] [method write] [arg index] [arg field] [arg value]]
Writes a single attribute [arg value] to field [arg field] of record [arg index]. Returns [arg index].
[list_end]

[call [arg shapefile] [method write] [arg coordinates] [arg values]]
Appends a new entity to [arg shapefile] and returns the index of the new entity. The [arg coordinates] argument is interpreted like the [arg coordinates] argument to [method {coordinates write}] and the [arg values] argument is interpreted like the [arg values] argument to [method {attributes write}].
[para]
Here an entity is added to a point shapefile with two attribute fields, an integer and a string:
[example {$shp write {{-0.001475 51.477812}} {66 {Royal Observatory Greenwich}}}]

[call [arg shapefile] [method close]]
Close the shapefile. Changes are not necessarily written to shapefiles until closed. (Open shapefiles are automatically closed when the interpreter exits, but it is a best practice to close them explicitly.)
[para]
Closing a shapefile deletes the associated [arg shapefile] command.

[list_end]

[subsection {Config Options}]

All configuration options are boolean. The possible values are [const 1] (true) and [const 0] (false).

[list_begin definitions]
[def [option allowAlternateNotation]]
Default: [const 0]. Affects output of large floating-point attribute values. If false, values too large to fit in field width will cause [method {attributes write}] methods to throw an error. If true, values too large to fit in field width will be stored using exponential notation, given sufficient field width. This increases the range of values that can be stored in floating-point fields, but carries an important risk: [emph {significant digits may be lost}].
[para]
Does not affect [method {attributes read}] methods. Floating-point attribute values stored in exponential notation are read successfully regardless of this setting.
[def [option getAllCoordinates]]
Default: [const 0]. If false, [method {info bounds}] and [method {coordinates read}] methods return a number of coordinates appropriate to the feature type. If true, all four coordinates (X, Y, Z, and M) are always returned, regardless of feature type. The default Z and M coordinate value is [const 0].
[para]
If [option getAllCoordinates] is set to true, [option getOnlyXyCoordinates] is automatically set to false.
[def [option getOnlyXyCoordinates]]
Default: [const 0]. If false, [method {info bounds}] and [method {coordinates read}] methods return a number of coordinates appropriate to the feature type. If true, only two coordinates (X and Y) are always returned, regardless of feature type.
[para]
If [option getOnlyXyCoordinates] is set to true, [option getAllCoordinates] is automatically set to false.
[def [option readRawStrings]]
Default: [const 0]. If false, standard numeric formatting is applied to numeric values returned by [method {attributes read}] (for example, trailing decimal zeros are omitted and values stored in exponential notation are converted to decimal notation). If true, numeric values are read as stored.
[para]
Field padding whitespace is never included in [method {attributes read}] results.
[def [option autoClosePolygons]]
Default: [const 0]. If false, polygon [sectref {Coordinate Lists}] given to [method {write}] or [method {coordinates write}] must be explicitly closed. If true, polygons that appear to be open will be automatically closed by appending a copy of the first vertex. To be considered closed, a polygon's first and last vertices must be identical in all dimensions.
[para]
If [option autoClosePolygons] is true, the minimum polygon vertex count is reduced to three (which must be unique), since the closing vertex will be provided automatically.
[list_end]

[section {Data Types}]

[subsection {Feature Types}]

Feature type as reported by [method {info type}], numeric code as reported by [method {info type numeric}], base type as reported by [method {info type base}], and dimension as reported by [method {info type dimension}]. A valid feature type must be specified when creating a new shapefile with [cmd {::shapetcl::shapefile}]. Feature type determines [sectref {Coordinate Lists} {Coordinate List}] format.

[list_begin itemized]
[item][const point], code: [const 1], base type: [const point], dimension: [const xy]
[item][const arc], code: [const 3], base type: [const arc], dimension: [const xy]
[item][const polygon], code: [const 5], base type: [const polygon], dimension: [const xy]
[item][const multipoint], code: [const 8], base type: [const multipoint], dimension: [const xy]
[item][const pointm], code: [const 21], base type: [const point], dimension: [const xym]
[item][const arcm], code: [const 23], base type: [const arc], dimension: [const xym]
[item][const polygonm], code: [const 25], base type: [const polygon], dimension: [const xym]
[item][const multipointm], code: [const 28], base type: [const multipoint], dimension: [const xym]
[item][const pointz], code: [const 11], base type: [const point], dimension: [const xyzm]
[item][const arcz], code: [const 13], base type: [const arc], dimension: [const xyzm]
[item][const polygonz], code: [const 15], base type: [const polygon], dimension: [const xyzm]
[item][const multipointz], code: [const 18], base type: [const multipoint], dimension: [const xyzm]
[list_end]

[subsection "Coordinate Lists"]

Coordinate lists represent feature geometry as a series of [term parts], each comprised of a series of vertex coordinates.
[para]
The number of coordinate values that comprise a vertex depends on the [sectref {Feature Types} {dimension}] of the shapefile. [const xy] shapefiles have two coordinates per vertex (X Y), [const xym] shapefiles have three coordinates per vertex (X Y M), and [const xyzm] shapefiles have four coordinates per vertex (X Y Z M). M coordinates represent non-spatial measures associated with each vertex. For simplicity, the remainder of this section will address [const xy] features only.
[para]
Each [term part] is a sub-list of the feature's coordinate list. The number of parts that may comprise a coordinate list depends on the [sectref {Feature Types} {base type}] of the shapefile. [const point] and [const multipoint] shapefiles have exactly one part per coordinate list; [const arc] and [const polygon] shapefiles may have one or more parts.
[list_begin definitions]
[def [const point]]
A [const point] coordinate list consists of one part with one vertex:
[example {$shp coordinates write {{0 0}}}]
[def [const multipoint]]
A [const multipoint] coordinate list consists of one part containing one or more vertices:
[example {$shp coordinates write {{0 0  1 1  2 2  3 3}}}]
Vertex order is not significant; a multipoint feature is a set of points with no further relationship implied.
[def [const arc]]
An [const arc] coordinate list consists of one or more parts, each representing a line segment. Each part consists of two or more vertices. Part vertices are connected in sequence. Part order is not significant.
[example {
# a very simple arc - one part with two vertices:
$shp coordinates write {{0 0  10 0}}
# an arc feature comprised of two simple segments:
$shp coordinates write {{0 0  10 0} {0 2  10 2}}
# an arc with one slightly longer part:
$shp coordinates write {{0 0  2 1  4 2  8 3  16 4}}
}]
Zero-length arc parts are disallowed by the [sectref {References} {shapefile specification}]. [package Shapetcl] does not enforce this rule.
[def [const polygon]]
A [const polygon] coordinate list consists of one or more parts, each representing a [term ring]. Rings are sequences of four or more vertices; the last vertex must be identical to the first vertex, making the ring a [term {closed loop}]. The minimum number of [emph unique] vertices per ring is therefore three, the minimum required to define an area (a triangle).
[para]
Rings may be [term outer] rings, defining the exterior perimeter of a polygon, or [term inner] rings, defining the perimeter of a hole in the interior of another outer ring. Ring 
type is indicated by vertex winding order: outer ring vertices are listed in clockwise sequence; inner ring vertices are listed in counterclockwise sequence. The first ring is conventionally an outer ring, but the sequence in which subsequent rings are defined is not significant. ([package Shapetcl] will automatically reverse the vertex order of rings that appear to be wound incorrectly, based on their spatial relationship to other rings.)
[para]
A polygon feature may have multiple outer rings. Outer rings may have multiple inner rings.
[example {
# a simple polygon with a single outer ring:
$shp coord write {{0 10  10 0  0 0  0 10}}
# a polygon with two outer rings ("islands"):
$shp coord write {{0 10  10 0  0 0  0 10} {20 10  30 0  20 0  20 10}}
# one outer ring with a hole in it (note winding orders):
$shp coord write {{0 10  10 0  0 0  0 10} {1 9  1 1  9 1  1 9}}
}]
Zero-length or zero-area rings are disallowed by the [sectref References {shapefile specification}]. Polygon rings may touch at vertices but may not intersect each other. [package Shapetcl] does not enforce these rules. 
[list_end]


[subsection "Field Definition Lists"]

Field definition lists describe shapefile attribute table fields. Each field is described by four properties, defined below. A valid field definition list therefore contains a multiple of four elements (four for each field it describes). At least one field must be described when defining fields with [cmd {::shapetcl::shapefile}] or [method {fields add}].

[list_begin definitions]
[def [const type]]
The type of data to be stored in the field. Must be one of [const integer], [const double] (floating-point numbers), or [const string]. [package Shapetcl] does not support other field types.
[def [const name]]
The name of the field. Must be at least one and not more than ten characters long. May contain only alphanumeric characters and underscores. Must begin with an alphabetic character. Must be unique (comparison is case insensitive).
[para]These constraints are imposed for compatibility with other software and are applied only when defining new fields. Existing shapefiles with field names that do not comply may be opened without error.
[def [const width]]
The width of the field, in bytes. Attempting to write values that do not fit within the field width will trigger an error. Shapefile attribute tables are DBF files, which store values as their string representations. To avoid truncation errors, allocate sufficient width to store the maximum conceivable attribute value.
[para]The maximum [const integer] field width is [const 11], since values with more than 10 digits (plus a potential 11th character, the minus sign) cannot be stored as 32-bit integers. Use a [const double] field instead.
[para]Multi-byte characters can be written to [const string] fields as long as the [emph byte] length of the string fits within the field width. Applications must specify the encoding themselves, for instance by writing an accompanying .cpg (code page) file containing the name of the encoding.
[para]Note that the maximum width of numeric fields is effectively reduced by one when writing negative values, since one character is used to store the leading minus sign.
[def [const precision]]
The portion of the field width to reserve for digits to the right of the decimal point. Should be [const 0] for all field types other than [const double].
[para]For example, a [const double] field with a [const width] of [const 12] and a [const precision] of [const 5] could store values that fit this format ([const N] represents a digit):
[example {NNNNNN.NNNNN}]
[list_end]

Here is an example in which three fields (one of each supported type) are added to a shapefile:

[example {$shp fields add {integer Id 10 0 double Value 19 9 string Label 30 0}}]

[subsection "Attribute Records"]

An attribute record is a list of attribute values. The number of values in an attribute record must match the number of fields in the attribute table (as reported by [method {fields count}]). Attribute record values are ordered the same as fields. Each value in an attribute record must conform to the associated [sectref {Field Definition Lists} {field definition}].
[para]An empty list [const {{}}] may be given for any field value to write a null value. Likewise, [method {attributes read}] methods may return an empty list for any field containing a null value. In this example, two integer values and one null value are written to a shapefile which has three attribute fields:
[example {$shp attributes write {0 100 {}}
}]
As a shorthand for writing a record consisting entirely of null values, you can write a single empty list [const {{}}]:
[example {# these are equivalent, assuming shp has three fields
$shp attributes write {{} {} {}}
$shp attributes write {}}]

[section {Limitations}]

[list_begin itemized]
[item][package Shapetcl] does not know about coordinate reference systems or projections. It is your application's reponsibility to manage metadata about the format of coordinates stored in shapefiles.
[item]Multipatch features are not supported.
[item]Only string, integer, and double attribute field types are supported.
[item]Entities may be added or modified but not deleted.
[item]Attribute fields may be added but fields may not be deleted nor may field definitions be changed.
[item]Feature geometry is not rigorously validated. It is your application's responsibility to ensure that [sectref {Coordinate Lists}] comply with shapefile specification rules regarding self-intersecting features, zero-length parts, and so on.
[item]Field definitions and attribute values are validated according to rules which may be inconsistent with those applied by other applications.
[list_end]

[section {Credits and References}]

[package Shapetcl] is based on the [uri {http://shapelib.maptools.org/} {Shapefile C Library}].
[para]
The [uri {http://www.esri.com/library/whitepapers/pdfs/shapefile.pdf} {ESRI Shapefile Technical Description}] (PDF) is the authoritative specification of the shapefile format.
[para]
A number of fine Tcl alternatives for working with shapefiles are available:
[list_begin itemized]
[item][uri {http://code.google.com/p/tcl-map/} tcl-map] by Alexandros Stergiakis.
[item][uri {http://geology.usgs.gov/tools/metadata/tclshp/} tclshp] and [uri {http://geology.usgs.gov/tools/metadata/tcldbf/} tcldbf] by Peter N. Schweitzer.
[item][uri {http://gpsmanshp.sourceforge.net/} gpsmanshp] by Miguel Filgueiras.
[item][uri {https://sourceforge.net/projects/tclshp/} Tclshp] by Devin J. Eyre.
[list_end]

[section "Bugs, Ideas, Feedback"]

Bug reports, feature requests, and general feedback are welcome at [uri https://github.com/anoved/Shapetcl/issues].

[manpage_end]
